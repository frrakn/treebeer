// Code generated by protoc-gen-go.
// source: context.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	context.proto

It has these top-level messages:
	Empty
	Team
	Player
	Game
	Stat
	SavedTeam
	SavedPlayer
	SavedGame
	SavedStat
	SeasonUpdates
	FullContext
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Team struct {
	Lcsid  int32  `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotid int32  `protobuf:"varint,3,opt,name=riotid" json:"riotid,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Tag    string `protobuf:"bytes,5,opt,name=tag" json:"tag,omitempty"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (m *Team) String() string            { return proto1.CompactTextString(m) }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Player struct {
	Lcsid    int32    `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotid   int32    `protobuf:"varint,3,opt,name=riotid" json:"riotid,omitempty"`
	Name     string   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Teamid   int32    `protobuf:"varint,5,opt,name=teamid" json:"teamid,omitempty"`
	Position string   `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`
	Addlpos  []string `protobuf:"bytes,7,rep,name=addlpos" json:"addlpos,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto1.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Game struct {
	Lcsid       int32  `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotgameid  string `protobuf:"bytes,3,opt,name=riotgameid" json:"riotgameid,omitempty"`
	Riotmatchid string `protobuf:"bytes,4,opt,name=riotmatchid" json:"riotmatchid,omitempty"`
	Redteamid   int32  `protobuf:"varint,5,opt,name=redteamid" json:"redteamid,omitempty"`
	Blueteamid  int32  `protobuf:"varint,6,opt,name=blueteamid" json:"blueteamid,omitempty"`
	Gamestart   int64  `protobuf:"varint,7,opt,name=gamestart" json:"gamestart,omitempty"`
	Gameend     int64  `protobuf:"varint,8,opt,name=gameend" json:"gameend,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto1.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Stat struct {
	Riotname string `protobuf:"bytes,2,opt,name=riotname" json:"riotname,omitempty"`
}

func (m *Stat) Reset()                    { *m = Stat{} }
func (m *Stat) String() string            { return proto1.CompactTextString(m) }
func (*Stat) ProtoMessage()               {}
func (*Stat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SavedTeam struct {
	Team   *Team `protobuf:"bytes,1,opt,name=team" json:"team,omitempty"`
	Teamid int32 `protobuf:"varint,2,opt,name=teamid" json:"teamid,omitempty"`
}

func (m *SavedTeam) Reset()                    { *m = SavedTeam{} }
func (m *SavedTeam) String() string            { return proto1.CompactTextString(m) }
func (*SavedTeam) ProtoMessage()               {}
func (*SavedTeam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SavedTeam) GetTeam() *Team {
	if m != nil {
		return m.Team
	}
	return nil
}

type SavedPlayer struct {
	Player   *Player `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Playerid int32   `protobuf:"varint,2,opt,name=playerid" json:"playerid,omitempty"`
}

func (m *SavedPlayer) Reset()                    { *m = SavedPlayer{} }
func (m *SavedPlayer) String() string            { return proto1.CompactTextString(m) }
func (*SavedPlayer) ProtoMessage()               {}
func (*SavedPlayer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SavedPlayer) GetPlayer() *Player {
	if m != nil {
		return m.Player
	}
	return nil
}

type SavedGame struct {
	Game   *Game `protobuf:"bytes,1,opt,name=game" json:"game,omitempty"`
	Gameid int32 `protobuf:"varint,2,opt,name=gameid" json:"gameid,omitempty"`
}

func (m *SavedGame) Reset()                    { *m = SavedGame{} }
func (m *SavedGame) String() string            { return proto1.CompactTextString(m) }
func (*SavedGame) ProtoMessage()               {}
func (*SavedGame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SavedGame) GetGame() *Game {
	if m != nil {
		return m.Game
	}
	return nil
}

type SavedStat struct {
	Stat   *Stat `protobuf:"bytes,1,opt,name=stat" json:"stat,omitempty"`
	Statid int32 `protobuf:"varint,2,opt,name=statid" json:"statid,omitempty"`
}

func (m *SavedStat) Reset()                    { *m = SavedStat{} }
func (m *SavedStat) String() string            { return proto1.CompactTextString(m) }
func (*SavedStat) ProtoMessage()               {}
func (*SavedStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SavedStat) GetStat() *Stat {
	if m != nil {
		return m.Stat
	}
	return nil
}

type SeasonUpdates struct {
	Teams   []*Team   `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	Players []*Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
}

func (m *SeasonUpdates) Reset()                    { *m = SeasonUpdates{} }
func (m *SeasonUpdates) String() string            { return proto1.CompactTextString(m) }
func (*SeasonUpdates) ProtoMessage()               {}
func (*SeasonUpdates) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SeasonUpdates) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *SeasonUpdates) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type FullContext struct {
	Teams   []*SavedTeam   `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
	Players []*SavedPlayer `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
	Games   []*SavedGame   `protobuf:"bytes,3,rep,name=games" json:"games,omitempty"`
	Stats   []*SavedStat   `protobuf:"bytes,4,rep,name=stats" json:"stats,omitempty"`
}

func (m *FullContext) Reset()                    { *m = FullContext{} }
func (m *FullContext) String() string            { return proto1.CompactTextString(m) }
func (*FullContext) ProtoMessage()               {}
func (*FullContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FullContext) GetTeams() []*SavedTeam {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *FullContext) GetPlayers() []*SavedPlayer {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *FullContext) GetGames() []*SavedGame {
	if m != nil {
		return m.Games
	}
	return nil
}

func (m *FullContext) GetStats() []*SavedStat {
	if m != nil {
		return m.Stats
	}
	return nil
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*Team)(nil), "proto.Team")
	proto1.RegisterType((*Player)(nil), "proto.Player")
	proto1.RegisterType((*Game)(nil), "proto.Game")
	proto1.RegisterType((*Stat)(nil), "proto.Stat")
	proto1.RegisterType((*SavedTeam)(nil), "proto.SavedTeam")
	proto1.RegisterType((*SavedPlayer)(nil), "proto.SavedPlayer")
	proto1.RegisterType((*SavedGame)(nil), "proto.SavedGame")
	proto1.RegisterType((*SavedStat)(nil), "proto.SavedStat")
	proto1.RegisterType((*SeasonUpdates)(nil), "proto.SeasonUpdates")
	proto1.RegisterType((*FullContext)(nil), "proto.FullContext")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for SeasonUpdate service

type SeasonUpdateClient interface {
	SeasonUpdate(ctx context.Context, in *SeasonUpdates, opts ...grpc.CallOption) (*Empty, error)
}

type seasonUpdateClient struct {
	cc *grpc.ClientConn
}

func NewSeasonUpdateClient(cc *grpc.ClientConn) SeasonUpdateClient {
	return &seasonUpdateClient{cc}
}

func (c *seasonUpdateClient) SeasonUpdate(ctx context.Context, in *SeasonUpdates, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.SeasonUpdate/SeasonUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SeasonUpdate service

type SeasonUpdateServer interface {
	SeasonUpdate(context.Context, *SeasonUpdates) (*Empty, error)
}

func RegisterSeasonUpdateServer(s *grpc.Server, srv SeasonUpdateServer) {
	s.RegisterService(&_SeasonUpdate_serviceDesc, srv)
}

func _SeasonUpdate_SeasonUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonUpdateServer).SeasonUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SeasonUpdate/SeasonUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonUpdateServer).SeasonUpdate(ctx, req.(*SeasonUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

var _SeasonUpdate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SeasonUpdate",
	HandlerType: (*SeasonUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SeasonUpdate",
			Handler:    _SeasonUpdate_SeasonUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for LiveStatUpdate service

type LiveStatUpdateClient interface {
	GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*SavedGame, error)
	GetStat(ctx context.Context, in *Stat, opts ...grpc.CallOption) (*SavedStat, error)
}

type liveStatUpdateClient struct {
	cc *grpc.ClientConn
}

func NewLiveStatUpdateClient(cc *grpc.ClientConn) LiveStatUpdateClient {
	return &liveStatUpdateClient{cc}
}

func (c *liveStatUpdateClient) GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*SavedGame, error) {
	out := new(SavedGame)
	err := grpc.Invoke(ctx, "/proto.LiveStatUpdate/GetGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveStatUpdateClient) GetStat(ctx context.Context, in *Stat, opts ...grpc.CallOption) (*SavedStat, error) {
	out := new(SavedStat)
	err := grpc.Invoke(ctx, "/proto.LiveStatUpdate/GetStat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LiveStatUpdate service

type LiveStatUpdateServer interface {
	GetGame(context.Context, *Game) (*SavedGame, error)
	GetStat(context.Context, *Stat) (*SavedStat, error)
}

func RegisterLiveStatUpdateServer(s *grpc.Server, srv LiveStatUpdateServer) {
	s.RegisterService(&_LiveStatUpdate_serviceDesc, srv)
}

func _LiveStatUpdate_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStatUpdateServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LiveStatUpdate/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStatUpdateServer).GetGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveStatUpdate_GetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStatUpdateServer).GetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LiveStatUpdate/GetStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStatUpdateServer).GetStat(ctx, req.(*Stat))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveStatUpdate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LiveStatUpdate",
	HandlerType: (*LiveStatUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGame",
			Handler:    _LiveStatUpdate_GetGame_Handler,
		},
		{
			MethodName: "GetStat",
			Handler:    _LiveStatUpdate_GetStat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for SeasonContext service

type SeasonContextClient interface {
	GetContext(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FullContext, error)
}

type seasonContextClient struct {
	cc *grpc.ClientConn
}

func NewSeasonContextClient(cc *grpc.ClientConn) SeasonContextClient {
	return &seasonContextClient{cc}
}

func (c *seasonContextClient) GetContext(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FullContext, error) {
	out := new(FullContext)
	err := grpc.Invoke(ctx, "/proto.SeasonContext/GetContext", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SeasonContext service

type SeasonContextServer interface {
	GetContext(context.Context, *Empty) (*FullContext, error)
}

func RegisterSeasonContextServer(s *grpc.Server, srv SeasonContextServer) {
	s.RegisterService(&_SeasonContext_serviceDesc, srv)
}

func _SeasonContext_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonContextServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SeasonContext/GetContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonContextServer).GetContext(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SeasonContext_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SeasonContext",
	HandlerType: (*SeasonContextServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContext",
			Handler:    _SeasonContext_GetContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xce, 0x66, 0x7f, 0xd2, 0x4c, 0x1a, 0x54, 0x59, 0x15, 0x5a, 0x45, 0x08, 0x82, 0x25, 0xa0,
	0x42, 0xa8, 0x42, 0x81, 0x17, 0x40, 0x14, 0x7a, 0xe1, 0x50, 0x6d, 0xe0, 0x02, 0x27, 0x37, 0x6b,
	0xb5, 0x91, 0x36, 0xd9, 0x28, 0xeb, 0x56, 0xf4, 0x4d, 0x78, 0x0f, 0x5e, 0x85, 0x07, 0x62, 0x66,
	0x6c, 0x27, 0xce, 0x2e, 0x47, 0x4e, 0xeb, 0x6f, 0xbe, 0xf1, 0xe7, 0xcf, 0xdf, 0x38, 0x81, 0xf1,
	0xa2, 0x5e, 0x1b, 0xfd, 0xd3, 0x9c, 0x6f, 0xb6, 0xb5, 0xa9, 0x45, 0xca, 0x1f, 0x39, 0x80, 0xf4,
	0xd3, 0x6a, 0x63, 0x1e, 0xe4, 0x77, 0x48, 0xbe, 0x6a, 0xb5, 0x12, 0xa7, 0x90, 0x56, 0x8b, 0x66,
	0x59, 0xe6, 0xfd, 0x69, 0x74, 0x96, 0x16, 0x16, 0x88, 0xc7, 0x90, 0x6d, 0x97, 0xb5, 0xc1, 0x72,
	0xcc, 0x65, 0x87, 0x84, 0x80, 0x64, 0xad, 0x56, 0x3a, 0x4f, 0xb0, 0x3a, 0x2c, 0x78, 0x2d, 0x4e,
	0x20, 0x36, 0xea, 0x26, 0x4f, 0xb9, 0x44, 0x4b, 0xf9, 0x2b, 0x82, 0xec, 0xaa, 0x52, 0x0f, 0x7a,
	0xfb, 0x1f, 0xe4, 0xb1, 0xd7, 0xa0, 0x51, 0xec, 0x4d, 0x6d, 0xaf, 0x45, 0x62, 0x02, 0x47, 0x9b,
	0xba, 0x59, 0x9a, 0x65, 0xbd, 0xce, 0x33, 0xee, 0xdf, 0x61, 0x91, 0xc3, 0x40, 0x95, 0x65, 0x85,
	0x38, 0x1f, 0x4c, 0x63, 0xa4, 0x3c, 0x94, 0x7f, 0x22, 0x48, 0x2e, 0x49, 0xf6, 0xdf, 0xc6, 0x9e,
	0x02, 0x90, 0x95, 0x1b, 0xec, 0x70, 0xe6, 0x86, 0x45, 0x50, 0x11, 0x53, 0x18, 0x11, 0x5a, 0x29,
	0xb3, 0xb8, 0xc5, 0x06, 0xeb, 0x33, 0x2c, 0x89, 0x27, 0x30, 0xdc, 0xea, 0xf2, 0xc0, 0xf1, 0xbe,
	0x40, 0xfa, 0xd7, 0xd5, 0x9d, 0x76, 0x74, 0xc6, 0x74, 0x50, 0xa1, 0xdd, 0x74, 0x52, 0x63, 0xd4,
	0xd6, 0xa0, 0xf5, 0xe8, 0x2c, 0x2e, 0xf6, 0x05, 0xba, 0x16, 0x01, 0xbd, 0x2e, 0xf3, 0x23, 0xe6,
	0x3c, 0x94, 0x12, 0x92, 0xb9, 0x51, 0x86, 0x42, 0x21, 0x33, 0x1c, 0x62, 0xdf, 0x86, 0xe2, 0xb1,
	0xbc, 0x80, 0xe1, 0x5c, 0xdd, 0xeb, 0x92, 0xc7, 0xfe, 0x0c, 0x12, 0x3a, 0x32, 0x8f, 0xb0, 0x69,
	0x34, 0x1b, 0xd9, 0x47, 0x72, 0x4e, 0x54, 0xc1, 0x44, 0x10, 0x7b, 0x3f, 0x8c, 0x5d, 0x5e, 0xc1,
	0x88, 0x55, 0xdc, 0x7c, 0x5f, 0x40, 0xb6, 0xe1, 0x95, 0x53, 0x1a, 0x3b, 0x25, 0x4b, 0x17, 0x8e,
	0xe4, 0x61, 0xf1, 0x6a, 0xa7, 0xb7, 0xc3, 0x3b, 0x5f, 0x3c, 0x16, 0xf4, 0x45, 0x77, 0x6a, 0xf9,
	0x22, 0xaa, 0x60, 0x82, 0x7c, 0xb9, 0xe9, 0x38, 0x5f, 0x16, 0xed, 0x54, 0x38, 0x06, 0x54, 0xc1,
	0xc4, 0x4c, 0x4b, 0x85, 0xa8, 0x82, 0x09, 0x52, 0xa1, 0xef, 0x5e, 0xc5, 0x22, 0xf9, 0x03, 0xc6,
	0x73, 0xad, 0x9a, 0x7a, 0xfd, 0x6d, 0x53, 0x2a, 0xa3, 0x1b, 0xf1, 0x1c, 0x52, 0xba, 0x78, 0x83,
	0x52, 0x71, 0x3b, 0x28, 0xcb, 0x88, 0x57, 0x30, 0xb0, 0x77, 0x69, 0x50, 0x2c, 0xee, 0x66, 0xe0,
	0x59, 0xf9, 0x3b, 0x82, 0xd1, 0xe7, 0xbb, 0xaa, 0xfa, 0x68, 0x7f, 0x98, 0xe2, 0xe5, 0xa1, 0xf6,
	0x89, 0xb7, 0xe9, 0x87, 0xe4, 0x0f, 0x78, 0xd3, 0x3e, 0x40, 0x84, 0x9d, 0xad, 0x53, 0x48, 0x95,
	0x5f, 0x0c, 0xbe, 0xde, 0x8e, 0x2a, 0xe7, 0x68, 0x69, 0xea, 0xa3, 0x4b, 0x37, 0xf8, 0x88, 0x3b,
	0x7d, 0x9c, 0x94, 0xa5, 0x67, 0x17, 0x70, 0x1c, 0x46, 0x22, 0xde, 0xb7, 0xf0, 0xa9, 0xdf, 0x18,
	0xe6, 0x36, 0x39, 0x76, 0x55, 0xfb, 0x67, 0xd3, 0x9b, 0xdd, 0xc2, 0xa3, 0x2f, 0xcb, 0x7b, 0x4d,
	0xc2, 0x6e, 0xdf, 0x6b, 0x18, 0x5c, 0x6a, 0xc3, 0x43, 0x0f, 0xc7, 0x3c, 0xe9, 0x18, 0x96, 0x3d,
	0xd7, 0xcb, 0xa3, 0x0d, 0x87, 0x39, 0xe9, 0x98, 0xc6, 0x93, 0x3e, 0xf8, 0x11, 0xfa, 0x98, 0xdf,
	0x02, 0xe0, 0x66, 0x8f, 0x0e, 0x8c, 0x4d, 0x7c, 0x92, 0xc1, 0x58, 0x64, 0xef, 0x3a, 0xe3, 0xe2,
	0xbb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x78, 0x7f, 0xb8, 0x1a, 0x43, 0x05, 0x00, 0x00,
}
