// Code generated by protoc-gen-go.
// source: context.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	context.proto

It has these top-level messages:
	Empty
	Team
	Teams
	Player
	Players
	Game
	Games
	Stat
	Stats
	SeasonUpdates
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Team struct {
	Lcsid  int32  `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotid int32  `protobuf:"varint,3,opt,name=riotid" json:"riotid,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Tag    string `protobuf:"bytes,5,opt,name=tag" json:"tag,omitempty"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (m *Team) String() string            { return proto1.CompactTextString(m) }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Teams struct {
	Teams []*Team `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
}

func (m *Teams) Reset()                    { *m = Teams{} }
func (m *Teams) String() string            { return proto1.CompactTextString(m) }
func (*Teams) ProtoMessage()               {}
func (*Teams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Teams) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type Player struct {
	Lcsid  int32  `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotid int32  `protobuf:"varint,3,opt,name=riotid" json:"riotid,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Teamid int32  `protobuf:"varint,5,opt,name=teamid" json:"teamid,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto1.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Players struct {
	Players []*Player `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
}

func (m *Players) Reset()                    { *m = Players{} }
func (m *Players) String() string            { return proto1.CompactTextString(m) }
func (*Players) ProtoMessage()               {}
func (*Players) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Players) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

type Game struct {
	Lcsid       int32  `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotgameid  string `protobuf:"bytes,3,opt,name=riotgameid" json:"riotgameid,omitempty"`
	Riotmatchid string `protobuf:"bytes,4,opt,name=riotmatchid" json:"riotmatchid,omitempty"`
	Redteamid   int32  `protobuf:"varint,5,opt,name=redteamid" json:"redteamid,omitempty"`
	Blueteamid  int32  `protobuf:"varint,6,opt,name=blueteamid" json:"blueteamid,omitempty"`
	Gamestart   int64  `protobuf:"varint,7,opt,name=gamestart" json:"gamestart,omitempty"`
	Gameend     int64  `protobuf:"varint,8,opt,name=gameend" json:"gameend,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto1.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Games struct {
	Games []*Game `protobuf:"bytes,1,rep,name=games" json:"games,omitempty"`
}

func (m *Games) Reset()                    { *m = Games{} }
func (m *Games) String() string            { return proto1.CompactTextString(m) }
func (*Games) ProtoMessage()               {}
func (*Games) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Games) GetGames() []*Game {
	if m != nil {
		return m.Games
	}
	return nil
}

type Stat struct {
	Riotname string `protobuf:"bytes,2,opt,name=riotname" json:"riotname,omitempty"`
}

func (m *Stat) Reset()                    { *m = Stat{} }
func (m *Stat) String() string            { return proto1.CompactTextString(m) }
func (*Stat) ProtoMessage()               {}
func (*Stat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type Stats struct {
	Stats []*Stat `protobuf:"bytes,1,rep,name=stats" json:"stats,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto1.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Stats) GetStats() []*Stat {
	if m != nil {
		return m.Stats
	}
	return nil
}

type SeasonUpdates struct {
	TeamsCreate   *Teams   `protobuf:"bytes,1,opt,name=teamsCreate" json:"teamsCreate,omitempty"`
	TeamsUpdate   *Teams   `protobuf:"bytes,2,opt,name=teamsUpdate" json:"teamsUpdate,omitempty"`
	PlayersCreate *Players `protobuf:"bytes,3,opt,name=playersCreate" json:"playersCreate,omitempty"`
	PlayersUpdate *Players `protobuf:"bytes,4,opt,name=playersUpdate" json:"playersUpdate,omitempty"`
}

func (m *SeasonUpdates) Reset()                    { *m = SeasonUpdates{} }
func (m *SeasonUpdates) String() string            { return proto1.CompactTextString(m) }
func (*SeasonUpdates) ProtoMessage()               {}
func (*SeasonUpdates) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SeasonUpdates) GetTeamsCreate() *Teams {
	if m != nil {
		return m.TeamsCreate
	}
	return nil
}

func (m *SeasonUpdates) GetTeamsUpdate() *Teams {
	if m != nil {
		return m.TeamsUpdate
	}
	return nil
}

func (m *SeasonUpdates) GetPlayersCreate() *Players {
	if m != nil {
		return m.PlayersCreate
	}
	return nil
}

func (m *SeasonUpdates) GetPlayersUpdate() *Players {
	if m != nil {
		return m.PlayersUpdate
	}
	return nil
}

func init() {
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
	proto1.RegisterType((*Team)(nil), "proto.Team")
	proto1.RegisterType((*Teams)(nil), "proto.Teams")
	proto1.RegisterType((*Player)(nil), "proto.Player")
	proto1.RegisterType((*Players)(nil), "proto.Players")
	proto1.RegisterType((*Game)(nil), "proto.Game")
	proto1.RegisterType((*Games)(nil), "proto.Games")
	proto1.RegisterType((*Stat)(nil), "proto.Stat")
	proto1.RegisterType((*Stats)(nil), "proto.Stats")
	proto1.RegisterType((*SeasonUpdates)(nil), "proto.SeasonUpdates")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for SeasonUpdate service

type SeasonUpdateClient interface {
	SeasonUpdate(ctx context.Context, in *SeasonUpdates, opts ...grpc.CallOption) (*Empty, error)
}

type seasonUpdateClient struct {
	cc *grpc.ClientConn
}

func NewSeasonUpdateClient(cc *grpc.ClientConn) SeasonUpdateClient {
	return &seasonUpdateClient{cc}
}

func (c *seasonUpdateClient) SeasonUpdate(ctx context.Context, in *SeasonUpdates, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.SeasonUpdate/SeasonUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SeasonUpdate service

type SeasonUpdateServer interface {
	SeasonUpdate(context.Context, *SeasonUpdates) (*Empty, error)
}

func RegisterSeasonUpdateServer(s *grpc.Server, srv SeasonUpdateServer) {
	s.RegisterService(&_SeasonUpdate_serviceDesc, srv)
}

func _SeasonUpdate_SeasonUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeasonUpdates)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeasonUpdateServer).SeasonUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SeasonUpdate/SeasonUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeasonUpdateServer).SeasonUpdate(ctx, req.(*SeasonUpdates))
	}
	return interceptor(ctx, in, info, handler)
}

var _SeasonUpdate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SeasonUpdate",
	HandlerType: (*SeasonUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SeasonUpdate",
			Handler:    _SeasonUpdate_SeasonUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for LiveStatUpdate service

type LiveStatUpdateClient interface {
	GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Empty, error)
	GetStat(ctx context.Context, in *Stat, opts ...grpc.CallOption) (*Empty, error)
}

type liveStatUpdateClient struct {
	cc *grpc.ClientConn
}

func NewLiveStatUpdateClient(cc *grpc.ClientConn) LiveStatUpdateClient {
	return &liveStatUpdateClient{cc}
}

func (c *liveStatUpdateClient) GetGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.LiveStatUpdate/GetGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveStatUpdateClient) GetStat(ctx context.Context, in *Stat, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.LiveStatUpdate/GetStat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LiveStatUpdate service

type LiveStatUpdateServer interface {
	GetGame(context.Context, *Game) (*Empty, error)
	GetStat(context.Context, *Stat) (*Empty, error)
}

func RegisterLiveStatUpdateServer(s *grpc.Server, srv LiveStatUpdateServer) {
	s.RegisterService(&_LiveStatUpdate_serviceDesc, srv)
}

func _LiveStatUpdate_GetGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStatUpdateServer).GetGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LiveStatUpdate/GetGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStatUpdateServer).GetGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveStatUpdate_GetStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStatUpdateServer).GetStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.LiveStatUpdate/GetStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStatUpdateServer).GetStat(ctx, req.(*Stat))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveStatUpdate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LiveStatUpdate",
	HandlerType: (*LiveStatUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGame",
			Handler:    _LiveStatUpdate_GetGame_Handler,
		},
		{
			MethodName: "GetStat",
			Handler:    _LiveStatUpdate_GetStat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x25, 0x4d, 0xbc, 0xe9, 0xce, 0x36, 0x15, 0xb2, 0x2a, 0x14, 0x55, 0x08, 0x2d, 0x3e, 0x40,
	0xc5, 0x61, 0x0f, 0x81, 0x7f, 0x00, 0xa8, 0x17, 0x0e, 0xc8, 0x85, 0x0b, 0x27, 0xbc, 0x1b, 0xab,
	0xac, 0xb4, 0xf9, 0x50, 0x6c, 0x10, 0xfd, 0x9f, 0xdc, 0xf8, 0x33, 0x78, 0xc6, 0x4e, 0xeb, 0x44,
	0x2b, 0x4e, 0x3d, 0x65, 0xde, 0xbc, 0x37, 0xe3, 0xe7, 0x19, 0x07, 0x8a, 0x5d, 0xd7, 0x5a, 0xfd,
	0xdb, 0x6e, 0xfa, 0xa1, 0xb3, 0x1d, 0x67, 0xf4, 0x11, 0x39, 0xb0, 0x8f, 0x4d, 0x6f, 0xef, 0xc4,
	0x37, 0xc8, 0xbe, 0x68, 0xd5, 0xf0, 0x0b, 0x60, 0x87, 0x9d, 0xd9, 0xd7, 0xe5, 0xc9, 0x3a, 0xb9,
	0x62, 0xd2, 0x03, 0xfe, 0x0c, 0x16, 0xc3, 0xbe, 0xb3, 0x2e, 0x9d, 0x52, 0x3a, 0x20, 0xce, 0x21,
	0x6b, 0x55, 0xa3, 0xcb, 0xcc, 0x65, 0x97, 0x92, 0x62, 0xfe, 0x14, 0x52, 0xab, 0x6e, 0x4b, 0x46,
	0x29, 0x0c, 0xc5, 0x1b, 0x60, 0xd8, 0xdb, 0xf0, 0x97, 0xc0, 0x2c, 0x06, 0x65, 0xb2, 0x4e, 0xaf,
	0x56, 0xd5, 0xca, 0x7b, 0xd9, 0x20, 0x29, 0x3d, 0x23, 0xb6, 0xb0, 0xf8, 0x7c, 0x50, 0x77, 0x7a,
	0x78, 0x04, 0x27, 0x4e, 0x8b, 0x4d, 0x9d, 0x96, 0x79, 0xad, 0x47, 0xa2, 0x82, 0xdc, 0x9f, 0x61,
	0xf8, 0x6b, 0xc8, 0x7b, 0x1f, 0x06, 0x4f, 0x45, 0xf0, 0xe4, 0x05, 0x72, 0x64, 0xc5, 0x9f, 0x04,
	0xb2, 0x6b, 0x6c, 0x7a, 0xdc, 0xd6, 0x0b, 0x00, 0x34, 0x72, 0xeb, 0x14, 0xc1, 0xda, 0x52, 0x46,
	0x19, 0xbe, 0x86, 0x15, 0xa2, 0x46, 0xd9, 0xdd, 0x0f, 0x27, 0xf0, 0x2e, 0xe3, 0x14, 0x7f, 0x0e,
	0xcb, 0x41, 0xd7, 0x13, 0xbf, 0x0f, 0x09, 0xec, 0xbf, 0x3d, 0xfc, 0xd4, 0x81, 0x5e, 0x10, 0x1d,
	0x65, 0xb0, 0x1a, 0x4f, 0x32, 0x56, 0x0d, 0xb6, 0xcc, 0x1d, 0x9d, 0xca, 0x87, 0x04, 0x2f, 0x21,
	0x47, 0xa0, 0xdb, 0xba, 0x3c, 0x25, 0x6e, 0x84, 0xb8, 0x1a, 0xbc, 0x15, 0xad, 0x86, 0xf4, 0xb3,
	0xd5, 0x20, 0x29, 0x3d, 0x23, 0x04, 0x64, 0x37, 0x56, 0x59, 0x7e, 0x09, 0xa7, 0x68, 0x9c, 0xc6,
	0x7d, 0x42, 0x17, 0xb9, 0xc7, 0xd8, 0x0f, 0x35, 0xd4, 0xcf, 0x60, 0x30, 0xeb, 0x87, 0xa4, 0xf4,
	0x8c, 0xf8, 0x9b, 0x40, 0x71, 0xa3, 0x95, 0xe9, 0xda, 0xaf, 0x7d, 0xad, 0xac, 0x33, 0xb1, 0x81,
	0x15, 0xbd, 0x82, 0xf7, 0x83, 0x76, 0xd8, 0x95, 0x26, 0xae, 0xf4, 0x2c, 0x7a, 0x25, 0x46, 0xc6,
	0x82, 0x7b, 0xbd, 0xaf, 0x27, 0x33, 0xc7, 0xf5, 0x5e, 0xc0, 0xdf, 0x41, 0x11, 0xf6, 0x19, 0x4e,
	0x48, 0xa9, 0xe2, 0x7c, 0xb2, 0x73, 0x23, 0xa7, 0xa2, 0xa8, 0x2a, 0x9c, 0x93, 0xfd, 0xb7, 0xca,
	0x8b, 0xaa, 0x0f, 0x70, 0x16, 0x5f, 0xce, 0x75, 0x99, 0xe2, 0x8b, 0x71, 0x22, 0xf1, 0x04, 0x2e,
	0x47, 0xf3, 0xfe, 0xa7, 0x7c, 0x52, 0x7d, 0x87, 0xf3, 0x4f, 0xfb, 0x5f, 0x1a, 0xc7, 0x16, 0xea,
	0x5e, 0x41, 0x7e, 0xad, 0x2d, 0x3d, 0xc5, 0x78, 0x49, 0xf3, 0xca, 0xa0, 0xa3, 0x85, 0xc5, 0xc3,
	0x9f, 0xeb, 0xb6, 0x0b, 0x82, 0x6f, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x56, 0xb2, 0x23,
	0x20, 0x04, 0x00, 0x00,
}
