// Code generated by protoc-gen-go.
// source: contextManager.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	contextManager.proto

It has these top-level messages:
	Team
	Player
	Game
	Result
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type Result_Status int32

const (
	Result_SUCCESS Result_Status = 0
	Result_FAIL    Result_Status = 1
)

var Result_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}
var Result_Status_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x Result_Status) String() string {
	return proto1.EnumName(Result_Status_name, int32(x))
}
func (Result_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Team struct {
	Teamid int32  `protobuf:"varint,1,opt,name=teamid" json:"teamid,omitempty"`
	Lcsid  int32  `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotid int32  `protobuf:"varint,3,opt,name=riotid" json:"riotid,omitempty"`
	Name   string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Tag    string `protobuf:"bytes,5,opt,name=tag" json:"tag,omitempty"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (m *Team) String() string            { return proto1.CompactTextString(m) }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Player struct {
	Playerid int32  `protobuf:"varint,1,opt,name=playerid" json:"playerid,omitempty"`
	Lcsid    int32  `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotid   int32  `protobuf:"varint,3,opt,name=riotid" json:"riotid,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Teamid   int32  `protobuf:"varint,5,opt,name=teamid" json:"teamid,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto1.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Game struct {
	Gameid      int32  `protobuf:"varint,1,opt,name=gameid" json:"gameid,omitempty"`
	Lcsid       int32  `protobuf:"varint,2,opt,name=lcsid" json:"lcsid,omitempty"`
	Riotgameid  string `protobuf:"bytes,3,opt,name=riotgameid" json:"riotgameid,omitempty"`
	Riotmatchid string `protobuf:"bytes,4,opt,name=riotmatchid" json:"riotmatchid,omitempty"`
	Redteamid   int32  `protobuf:"varint,5,opt,name=redteamid" json:"redteamid,omitempty"`
	Blueteamid  int32  `protobuf:"varint,6,opt,name=blueteamid" json:"blueteamid,omitempty"`
	Gamestart   int64  `protobuf:"varint,7,opt,name=gamestart" json:"gamestart,omitempty"`
	Gameend     int64  `protobuf:"varint,8,opt,name=gameend" json:"gameend,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto1.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Result struct {
	Status Result_Status `protobuf:"varint,1,opt,name=status,enum=proto.Result_Status" json:"status,omitempty"`
	Detail string        `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto1.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto1.RegisterType((*Team)(nil), "proto.Team")
	proto1.RegisterType((*Player)(nil), "proto.Player")
	proto1.RegisterType((*Game)(nil), "proto.Game")
	proto1.RegisterType((*Result)(nil), "proto.Result")
	proto1.RegisterEnum("proto.Result_Status", Result_Status_name, Result_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ContextUpdate service

type ContextUpdateClient interface {
	CreateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Result, error)
	UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Result, error)
	CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Result, error)
	UpdatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Result, error)
	CreateGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Result, error)
	UpdateGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Result, error)
}

type contextUpdateClient struct {
	cc *grpc.ClientConn
}

func NewContextUpdateClient(cc *grpc.ClientConn) ContextUpdateClient {
	return &contextUpdateClient{cc}
}

func (c *contextUpdateClient) CreateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.ContextUpdate/CreateTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextUpdateClient) UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.ContextUpdate/UpdateTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextUpdateClient) CreatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.ContextUpdate/CreatePlayer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextUpdateClient) UpdatePlayer(ctx context.Context, in *Player, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.ContextUpdate/UpdatePlayer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextUpdateClient) CreateGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.ContextUpdate/CreateGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextUpdateClient) UpdateGame(ctx context.Context, in *Game, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/proto.ContextUpdate/UpdateGame", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContextUpdate service

type ContextUpdateServer interface {
	CreateTeam(context.Context, *Team) (*Result, error)
	UpdateTeam(context.Context, *Team) (*Result, error)
	CreatePlayer(context.Context, *Player) (*Result, error)
	UpdatePlayer(context.Context, *Player) (*Result, error)
	CreateGame(context.Context, *Game) (*Result, error)
	UpdateGame(context.Context, *Game) (*Result, error)
}

func RegisterContextUpdateServer(s *grpc.Server, srv ContextUpdateServer) {
	s.RegisterService(&_ContextUpdate_serviceDesc, srv)
}

func _ContextUpdate_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextUpdateServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContextUpdate/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextUpdateServer).CreateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextUpdate_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextUpdateServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContextUpdate/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextUpdateServer).UpdateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextUpdate_CreatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextUpdateServer).CreatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContextUpdate/CreatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextUpdateServer).CreatePlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextUpdate_UpdatePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Player)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextUpdateServer).UpdatePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContextUpdate/UpdatePlayer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextUpdateServer).UpdatePlayer(ctx, req.(*Player))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextUpdate_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextUpdateServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContextUpdate/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextUpdateServer).CreateGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextUpdate_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Game)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextUpdateServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ContextUpdate/UpdateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextUpdateServer).UpdateGame(ctx, req.(*Game))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContextUpdate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ContextUpdate",
	HandlerType: (*ContextUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeam",
			Handler:    _ContextUpdate_CreateTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _ContextUpdate_UpdateTeam_Handler,
		},
		{
			MethodName: "CreatePlayer",
			Handler:    _ContextUpdate_CreatePlayer_Handler,
		},
		{
			MethodName: "UpdatePlayer",
			Handler:    _ContextUpdate_UpdatePlayer_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _ContextUpdate_CreateGame_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _ContextUpdate_UpdateGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x92, 0x5f, 0x6a, 0xe3, 0x30,
	0x10, 0xc6, 0xe3, 0xd8, 0x56, 0x92, 0xc9, 0x66, 0x09, 0x22, 0x2c, 0x26, 0x2c, 0xbb, 0xc1, 0x4f,
	0xa5, 0x14, 0x3f, 0xa4, 0x27, 0x28, 0xa6, 0x2d, 0x85, 0x16, 0x8a, 0xdd, 0x1c, 0x40, 0x89, 0x45,
	0x1a, 0x70, 0xec, 0x20, 0x2b, 0xd0, 0xbe, 0xf4, 0x2a, 0xbd, 0x60, 0x0f, 0x51, 0x69, 0xa4, 0xc4,
	0x0e, 0xf4, 0x4f, 0x1e, 0xfa, 0xa4, 0xf9, 0xbe, 0xf9, 0x49, 0x33, 0x23, 0x06, 0x46, 0x8b, 0xb2,
	0x90, 0xfc, 0x49, 0xde, 0xb1, 0x82, 0x2d, 0xb9, 0x88, 0x36, 0xa2, 0x94, 0x25, 0xf5, 0xf1, 0x08,
	0x05, 0x78, 0x0f, 0x9c, 0xad, 0xe9, 0x1f, 0x20, 0x52, 0x9d, 0xab, 0x2c, 0x70, 0x26, 0xce, 0x89,
	0x9f, 0x58, 0x45, 0x47, 0xe0, 0xe7, 0x8b, 0x4a, 0xd9, 0x6d, 0xb4, 0x8d, 0xd0, 0xb4, 0x58, 0x95,
	0x52, 0xd9, 0xae, 0xa1, 0x8d, 0xa2, 0x14, 0xbc, 0x82, 0xad, 0x79, 0xe0, 0x29, 0xb7, 0x97, 0x60,
	0x4c, 0x87, 0xe0, 0x4a, 0xb6, 0x0c, 0x7c, 0xb4, 0x74, 0x18, 0xbe, 0x00, 0xb9, 0xcf, 0xd9, 0x33,
	0x17, 0x74, 0x0c, 0xdd, 0x0d, 0x46, 0xfb, 0xba, 0x7b, 0xfd, 0x03, 0x95, 0xeb, 0x99, 0xfc, 0xe6,
	0x4c, 0xe1, 0x9b, 0x03, 0xde, 0xb5, 0x05, 0x96, 0xea, 0xac, 0x87, 0x36, 0xea, 0x93, 0xd2, 0xff,
	0x00, 0x74, 0x31, 0x7b, 0xc3, 0xc5, 0x42, 0x0d, 0x87, 0x4e, 0xa0, 0xaf, 0xd5, 0x9a, 0xc9, 0xc5,
	0xa3, 0x02, 0x4c, 0x27, 0x4d, 0x8b, 0xfe, 0x85, 0x9e, 0xe0, 0xd9, 0x41, 0x4f, 0xb5, 0xa1, 0xdf,
	0x9f, 0xe7, 0x5b, 0x6e, 0xd3, 0x04, 0xd3, 0x0d, 0x47, 0xdf, 0xd6, 0x95, 0x2a, 0xc9, 0x84, 0x0c,
	0x3a, 0x2a, 0xed, 0x26, 0xb5, 0x41, 0x03, 0xe8, 0x68, 0xc1, 0x8b, 0x2c, 0xe8, 0x62, 0x6e, 0x27,
	0xc3, 0x12, 0x48, 0xc2, 0xab, 0x6d, 0x2e, 0xe9, 0x19, 0x10, 0x05, 0xcb, 0x6d, 0x85, 0xf3, 0xfe,
	0x9e, 0x8e, 0xcc, 0x2e, 0x44, 0x26, 0x1d, 0xa5, 0x98, 0x4b, 0x2c, 0xa3, 0x7f, 0x27, 0xe3, 0x92,
	0xad, 0x72, 0xfc, 0x86, 0x5e, 0x62, 0x55, 0xf8, 0x1f, 0x88, 0x21, 0x69, 0x1f, 0x3a, 0xe9, 0x2c,
	0x8e, 0x2f, 0xd3, 0x74, 0xd8, 0xa2, 0x5d, 0xf0, 0xae, 0x2e, 0x6e, 0x6e, 0x87, 0xce, 0xf4, 0xb5,
	0x0d, 0x83, 0xd8, 0xec, 0xdc, 0x6c, 0x93, 0x31, 0xc9, 0xe9, 0x29, 0x40, 0x2c, 0xb8, 0x8a, 0x70,
	0xd7, 0xfa, 0xb6, 0xac, 0x16, 0xe3, 0xc1, 0x41, 0x0f, 0x61, 0x4b, 0xb3, 0xe6, 0xd6, 0x11, 0x6c,
	0x04, 0xbf, 0xcc, 0xbb, 0x76, 0x9f, 0x76, 0x80, 0x91, 0x1f, 0xf2, 0xe6, 0xed, 0x23, 0xf9, 0x7d,
	0xdf, 0xb8, 0x2e, 0xbb, 0x5e, 0xb4, 0xf8, 0xa2, 0xef, 0xef, 0xd9, 0x39, 0x41, 0x7d, 0xfe, 0x1e,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0x89, 0x51, 0xe3, 0x9b, 0x03, 0x00, 0x00,
}
